//
//  ConcurrencySet.swift
//  Swifty-Quiz
//
//  Created by Евгений Никитин on 04.07.2021.
//  Copyright © 2021 Evel-Devel. All rights reserved.
//

import Foundation

class ConcurrencySet {
    static func getQuestions() -> [Question] {
        return [
            Question(question: ["Имеет ли Swift встроенную поддержку для структурированного написания асинхронного и параллельного кода?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "",
                     optionD: "",
                     questionId: 344721645,
                     helpText: "Swift имеет встроенную поддержку для структурированного написания асинхронного и параллельного кода."),
            
            Question(question: ["Можете ли вы приостановить асинхронный код?",
                                "Можете ли вы приостановить и возобновить асинхронный код?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "",
                     optionD: "",
                     questionId: 621075657,
                     helpText: "Асинхронный код можно приостановить и возобновить позже, хотя одновременно выполняется только одна часть программы. Приостановка и возобновление кода в вашей программе позволяет ей продолжать выполнять краткосрочные операции, такие как обновление пользовательского интерфейса, при этом продолжая работать над длительными операциями, такими как выборка данных по сети или анализ файлов."),
            
            Question(question: ["Может ли компьютер с четырехъядерным процессором одновременно запускать четыре фрагмента кода с разными задачами?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "",
                     optionD: "",
                     questionId: 600139943,
                     helpText: "Параллельный код означает одновременное выполнение нескольких фрагментов кода - например, компьютер с четырехъядерным процессором может одновременно запускать четыре фрагмента кода, при этом каждое ядро ​​выполняет одну из задач."),
            
            Question(question: ["При написании параллельного и асинхронного кода мы можем обращаться к ___ для безопасного доступа к изменяемому состоянию"],
                     image: "",
                     optionA: "Акторам",
                     optionB: "Задачам",
                     optionC: "Группам задач",
                     optionD: "Асинхронной последовательности",
                     questionId: 488062348,
                     helpText: "Дополнительная гибкость планирования за счет параллельного или асинхронного кода также связана с увеличением сложности. Swift позволяет вам выразить свое намерение таким образом, чтобы включить некоторые проверки во время компиляции - например, вы можете использовать акторы для безопасного доступа к изменяемому состоянию."),
            
            Question(question: ["Может ли добавление параллелизма затруднить отладку вашего кода?"],
                     image: "",
                     optionA: "Конечно",
                     optionB: "Нет, не может",
                     optionC: "",
                     optionD: "",
                     questionId: 197698172,
                     helpText: "Добавление параллелизма к медленному или ошибочному коду не является гарантией того, что он станет быстрым или правильным. Фактически, добавление параллелизма может даже затруднить отладку вашего кода. Однако использование поддержки Swift на уровне языка для параллелизма в коде, который должен быть параллельным, означает, что Swift может помочь вам выявить проблемы во время компиляции."),
            
            Question(question: ["Модель параллелизма в Swift построена на основе потоков, но вы не взаимодействуете с ними напрямую. Так ли это?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "",
                     optionD: "",
                     questionId: 229995926,
                     helpText: "Если вы раньше писали параллельный код, возможно, вы привыкли работать с потоками. Модель параллелизма в Swift построена на основе потоков, но вы не взаимодействуете с ними напрямую. Асинхронная функция в Swift может отказаться от потока, в котором она выполняется, что позволяет другой асинхронной функции работать в этом потоке, пока первая функция заблокирована."),
            
            Question(question: ["Почему предпочтительнее использовать нативный параллельный код, который поддерживается в Swift?"],
                     image: "",
                     optionA: "Лучше читается",
                     optionB: "Хуже читается",
                     optionC: "Быстрее компилируется",
                     optionD: "",
                     questionId: 814389145,
                     helpText: "Хотя можно писать параллельный код без использования языковой поддержки Swift, этот код, как правило, труднее читать."),
        ]
    }
}
